{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst app = express();\nconst port = 5050;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json()); // Parse JSON request body\n\n// Route to create a mock order\napp.post('/create-order', (req, res) => {\n  const {\n    amount,\n    packageName\n  } = req.body;\n\n  // Simulate an order creation with a random order ID\n  const orderId = `order_${Math.random().toString(36).substr(2, 9)}`;\n  console.log(`Created mock order: ${orderId} for package: ${packageName} with amount ₹${amount}`);\n\n  // Return the mock order ID to the frontend\n  res.json({\n    orderId,\n    packageName\n  });\n});\n\n// Route to verify mock payment status\napp.post('/verify-payment', (req, res) => {\n  const {\n    orderId,\n    paymentStatus\n  } = req.body;\n  console.log(\"Received payment verification request:\", req.body); // Log incoming data\n\n  // Simulate payment verification\n  if (paymentStatus === 'success') {\n    console.log(`Payment for order ${orderId} was successful.`);\n    res.json({\n      status: 'success',\n      message: 'Payment was successful!'\n    });\n  } else {\n    console.log(`Payment for order ${orderId} failed.`);\n    res.json({\n      status: 'failed',\n      message: 'Payment failed. Please try again!'\n    });\n  }\n});\n\n// Start the server on port 5000\napp.listen(port, () => {\n  console.log(`Mock server running at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","bodyParser","cors","app","port","use","json","post","req","res","amount","packageName","body","orderId","Math","random","toString","substr","console","log","paymentStatus","status","message","listen"],"sources":["C:/Users/keert/Documents/travel-buddy/src/paymentserver.js"],"sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst port = 5050;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json()); // Parse JSON request body\r\n\r\n// Route to create a mock order\r\napp.post('/create-order', (req, res) => {\r\n  const { amount, packageName } = req.body;\r\n\r\n  // Simulate an order creation with a random order ID\r\n  const orderId = `order_${Math.random().toString(36).substr(2, 9)}`;\r\n  console.log(`Created mock order: ${orderId} for package: ${packageName} with amount ₹${amount}`);\r\n\r\n  // Return the mock order ID to the frontend\r\n  res.json({ orderId, packageName });\r\n});\r\n\r\n// Route to verify mock payment status\r\napp.post('/verify-payment', (req, res) => {\r\n  const { orderId, paymentStatus } = req.body;\r\n  console.log(\"Received payment verification request:\", req.body); // Log incoming data\r\n\r\n  // Simulate payment verification\r\n  if (paymentStatus === 'success') {\r\n    console.log(`Payment for order ${orderId} was successful.`);\r\n    res.json({ status: 'success', message: 'Payment was successful!' });\r\n  } else {\r\n    console.log(`Payment for order ${orderId} failed.`);\r\n    res.json({ status: 'failed', message: 'Payment failed. Please try again!' });\r\n  }\r\n});\r\n\r\n// Start the server on port 5000\r\napp.listen(port, () => {\r\n  console.log(`Mock server running at http://localhost:${port}`);\r\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACE,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE5B;AACAH,GAAG,CAACI,IAAI,CAAC,eAAe,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGH,GAAG,CAACI,IAAI;;EAExC;EACA,MAAMC,OAAO,GAAG,SAASC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EAClEC,OAAO,CAACC,GAAG,CAAC,uBAAuBN,OAAO,iBAAiBF,WAAW,iBAAiBD,MAAM,EAAE,CAAC;;EAEhG;EACAD,GAAG,CAACH,IAAI,CAAC;IAAEO,OAAO;IAAEF;EAAY,CAAC,CAAC;AACpC,CAAC,CAAC;;AAEF;AACAR,GAAG,CAACI,IAAI,CAAC,iBAAiB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEI,OAAO;IAAEO;EAAc,CAAC,GAAGZ,GAAG,CAACI,IAAI;EAC3CM,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEX,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC;;EAEjE;EACA,IAAIQ,aAAa,KAAK,SAAS,EAAE;IAC/BF,OAAO,CAACC,GAAG,CAAC,qBAAqBN,OAAO,kBAAkB,CAAC;IAC3DJ,GAAG,CAACH,IAAI,CAAC;MAAEe,MAAM,EAAE,SAAS;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC;EACrE,CAAC,MAAM;IACLJ,OAAO,CAACC,GAAG,CAAC,qBAAqBN,OAAO,UAAU,CAAC;IACnDJ,GAAG,CAACH,IAAI,CAAC;MAAEe,MAAM,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAoC,CAAC,CAAC;EAC9E;AACF,CAAC,CAAC;;AAEF;AACAnB,GAAG,CAACoB,MAAM,CAACnB,IAAI,EAAE,MAAM;EACrBc,OAAO,CAACC,GAAG,CAAC,2CAA2Cf,IAAI,EAAE,CAAC;AAChE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}